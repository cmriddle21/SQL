In this SQL, I'm querying a database with multiple tables in it to quantify statistics about customer and order data. 

#1. Analyzing the total sales for each product.

SELECT 
  Product, 
  SUM(Quantity) AS total_quantity, 
  ROUND(SUM(price * quantity), 2) AS total_sales
FROM (
  SELECT * FROM AprSales
  UNION ALL SELECT * FROM FebSales
  UNION ALL SELECT * FROM JanSales
  UNION ALL SELECT * FROM MarSales
  UNION ALL SELECT * FROM MaySales
) AS all_sales
GROUP BY 
  Product
ORDER BY 
  total_sales DESC;


#2. Determining total sales.

SELECT 
  ROUND(SUM(price * quantity), 2) AS total_sales
FROM (
  SELECT price, quantity FROM AprSales
  UNION ALL SELECT price, quantity FROM FebSales
  UNION ALL SELECT price, quantity FROM JanSales
  UNION ALL SELECT price, quantity FROM MarSales
  UNION ALL SELECT price, quantity FROM MaySales
) AS all_sales;


#3. Determining how many orders were placed in January.

SELECT COUNT(orderid)
FROM BIT_DB.JanSales
WHERE length(orderid) = 6 
AND orderid <> 'Order ID';


#4. Determining how many of those orders were for an iPhone.

SELECT COUNT(orderid)
FROM BIT_DB.JanSales
WHERE Product='iPhone'
AND length(orderid) = 6 
AND orderid <> 'Order ID';


#5. Selecting the customer account numbers for all the orders that were placed in February. 

SELECT distinct acctnum
FROM BIT_DB.customers cust
INNER JOIN BIT_DB.FebSales Feb
ON cust.order_id=FEB.orderid
WHERE length(orderid) = 6 
AND orderid <> 'Order ID';


#6. Determining cheapest product  sold in January, and the price.

SELECT product, min(price) 
FROM BIT_DB.JanSales Jan 
GROUP BY product, price 
ORDER BY price ASC
LIMIT 1;


#7. Determining the total revenue for each product sold in January.

SELECT sum(quantity)*price AS revenue
,product
FROM BIT_DB.JanSales
GROUP BY product;


#8. Determining products sold in February at 548 Lincoln St, Seattle, WA 98101, quantity of each sold, and the total revenue.

SELECT 
sum(Quantity), 
product, 
sum(quantity)*price as revenue
FROM BIT_DB.FebSales 
WHERE location = '548 Lincoln St, Seattle, WA 98101'
GROUP BY product;


#9. Determining how many customers ordered more than 2 products at a time, and the average amount spent for those customers.

SELECT 
count(distinct cust.acctnum), 
avg(quantity*price)
FROM BIT_DB.FebSales Feb
LEFT JOIN BIT_DB.customers cust
ON FEB.orderid=cust.order_id
WHERE Feb.Quantity>2
AND length(orderid) = 6 
AND orderid <> 'Order ID';


#10. Listing all the products sold in Los Angeles in February, and including how many of each were sold. 

SELECT 
distinct Product, 
SUM(quantity)
FROM BIT_DB.FebSales
WHERE location LIKE '%Los Angeles%'
GROUP BY product;


#11. Determining which locations in New York received at least 3 orders in January, and number of orders they each received.

SELECT 
distinct location, count(orderID)
FROM BIT_DB.JanSales
WHERE location LIKE '%NY%'
AND length(orderid) = 6 
AND orderid <> 'Order ID'
GROUP BY location
HAVING count(orderID) >= 3;


#12. Determining quantity of each type of headphone sold in February.

SELECT sum(Quantity) as quantity,
Product
FROM BIT_DB.FebSales 
WHERE Product LIKE '%Headphones%'
GROUP BY Product;


#13. Determining the average amount spent per account in February.

SELECT sum(quantity*price)/count(c.acctnum) 
as avg_spent
FROM BIT_DB.FebSales feb

LEFT JOIN BIT_DB.customers c
ON feb.orderID = c.order_ID

WHERE length(orderid) = 6 
AND orderid <> 'Order ID';


#14. Determining the average quantity of products purchased per account in February.

select sum(quantity)/count(cust.acctnum)
FROM BIT_DB.FebSales Feb

LEFT JOIN BIT_DB.customers cust
ON FEB.orderid=cust.order_id

WHERE length(orderid) = 6 
AND orderid <> 'Order ID';


#15. Analyzing which product brought in the most revenue in January and how much revenue it brought in total.

SELECT product, sum(quantity*price) as revenue
FROM BIT_DB.JanSales
GROUP BY product
ORDER BY revenue desc
LIMIT 1;
