# For this project, I used Kaggle to downloaded a digital media store data "Chinook".
# The Chinook data base contained 11 tables, albums, artists, customers, employees, genres, 
# invoice_items, invoices, media_types, playlist_track, playlists, tracks.
# I then performed analytics on the data using SQL. 

#1. Determining the top 10 albums, including the album title, artist name, and number of times it has been purchased:

SELECT 
  albums.Title AS album_title, 
  artists.Name AS artist_name, 
  COUNT(*) AS num_purchases
FROM 
  chinook.invoice_items
  JOIN chinook.tracks ON invoice_items.TrackId = tracks.TrackId
  JOIN chinook.albums ON tracks.AlbumId = albums.AlbumId
  JOIN chinook.artists ON albums.ArtistId = artists.ArtistId
GROUP BY 
  albums.AlbumId
ORDER BY 
  num_purchases DESC
LIMIT 
  10;


#2. Determining  the total number of tracks sold by genre:

SELECT 
  genres.Name AS genre, 
  COUNT(*) AS num_tracks_sold
FROM 
  chinook.invoice_items
  JOIN chinook.tracks ON invoice_items.TrackId = tracks.TrackId
  JOIN chinook.genres ON tracks.GenreId = genres.GenreId
GROUP BY 
  genres.GenreId
ORDER BY 
  num_tracks_sold DESC;


#3. Determining the customer who spent the most money at the store, including their name and total spent:

SELECT 
  customers.FirstName || ' ' || customers.LastName AS customer_name, 
  SUM(invoices.Total) AS total_spent
FROM 
  chinook.customers
  JOIN chinook.invoices ON customers.CustomerId = invoices.CustomerId
GROUP BY 
  customers.CustomerId
ORDER BY 
  total_spent DESC
LIMIT 
  1;


#4. Determining the number of customers who have made more than one purchase, grouped by country:

SELECT 
  customers.Country, 
  COUNT(DISTINCT customers.CustomerId) AS num_return_customers
FROM 
  chinook.customers
  JOIN chinook.invoices ON customers.CustomerId = invoices.CustomerId
GROUP BY 
  customers.Country
HAVING 
  COUNT(DISTINCT invoices.InvoiceId) > 1;


#5. Determining the average number of songs per album by each artist:

SELECT 
  artists.Name AS artist_name, 
  AVG(subquery.num_songs) AS avg_songs_per_album
FROM 
  chinook.artists
  JOIN (
    SELECT 
      AlbumId, 
      COUNT(*) AS num_songs
    FROM 
      chinook.tracks
    GROUP BY 
      AlbumId
  ) subquery ON artists.ArtistId = (
    SELECT 
      albums.ArtistId
    FROM 
      chinook.albums
    WHERE 
      albums.AlbumId = subquery.AlbumId
  )
GROUP BY 
  artists.ArtistId
ORDER BY 
  avg_songs_per_album DESC;
  
  
#6. Determining the top-selling genres in the USA:
  
SELECT 
    genres.Name, 
    SUM(invoice_items.Quantity) AS TotalSales
FROM 
    genres 
    INNER JOIN tracks ON genres.GenreId = tracks.GenreId
    INNER JOIN invoice_items ON tracks.TrackId = invoice_items.TrackId
    INNER JOIN invoices ON invoice_items.InvoiceId = invoices.InvoiceId
    INNER JOIN customers ON invoices.CustomerId = customers.CustomerId
WHERE 
    customers.Country = 'USA'
GROUP BY 
    genres.Name
ORDER BY 
    TotalSales DESC;
    
    
#7. Determining the most popular artists in terms of sales:

SELECT 
    artists.Name, 
    SUM(invoice_items.Quantity) AS TotalSales
FROM 
    artists 
    INNER JOIN albums ON artists.ArtistId = albums.ArtistId
    INNER JOIN tracks ON albums.AlbumId = tracks.AlbumId
    INNER JOIN invoice_items ON tracks.TrackId = invoice_items.TrackId
GROUP BY 
    artists.Name
ORDER BY 
    TotalSales DESC;


#8. Determining the average order value for customers in each country:

SELECT 
    customers.Country, 
    AVG(invoices.Total) AS AverageOrderValue
FROM 
    customers 
    INNER JOIN invoices ON customers.CustomerId = invoices.CustomerId
GROUP BY 
    customers.Country
ORDER BY 
    AverageOrderValue DESC;


#9. Determining the top-selling tracks in the USA:

SELECT 
  tracks.Name AS track_name, 
  artists.Name AS artist_name, 
  COUNT(invoice_items.Quantity) AS total_sold
FROM 
  chinook.invoice_items 
  INNER JOIN tracks ON invoice_items.TrackId = tracks.TrackId 
  INNER JOIN albums ON tracks.AlbumId = albums.AlbumId 
  INNER JOIN artists ON albums.ArtistId = artists.ArtistId 
  INNER JOIN invoices ON invoice_items.InvoiceId = invoices.InvoiceId 
  INNER JOIN customers ON invoices.CustomerId = customers.CustomerId 
WHERE 
  customers.Country = 'USA'
GROUP BY 
  tracks.Name, 
  artists.Name
ORDER BY 
  COUNT(invoice_items.Quantity) DESC
LIMIT 10;

#10. Customers (their full names, customer ID, and country) who are not in the US.

SELECT FirstName, LastName, CustomerID, Country
FROM chinook.customers
WHERE country <> 'USA';


#11. Customers only from Brazil

SELECT *
FROM chinook.customers
WHERE country = 'Brazil';


#12. Invoices of customers who are billing from Brazil.

SELECT cust.FirstName, cust.LastName, 
inv.CustomerId, inv.InvoiceDate, inv.BillingCountry
FROM chinook.customers cust
JOIN chinook.invoices inv
ON cust.CustomerId = inv.InvoiceId
WHERE inv.BillingCountry = 'Brazil';


#14. Finding a unique/distinct list of billing countries from the Invoice table.

SELECT distinct BillingCountry
FROM chinook.invoices;


#15. Shows the invoices associated with each sales agent.

SELECT emp.LastName, emp.Firstname, inv.InvoiceId
FROM chinook.Employees emp 
JOIN chinook.Customers cust ON cust.SupportRepId = emp.EmployeeId
JOIN chinook.Invoices Inv ON Inv.CustomerId = cust.CustomerId;


#16. Show the Invoice Total, Customer name, Country, and Sales Agent name for all invoices and customers.

SELECT emp.LastName, emp.Firstname, cust.FirstName, cust.LastName, cust.Country, inv.total
FROM chinook.employees emp 
JOIN chinook.Customers cust ON cust.SupportRepId = emp.EmployeeId
JOIN chinook.Invoices Inv ON Inv.CustomerId = cust.CustomerId;


#17. How many Invoices were there in 2009?

SELECT COUNT(*)
FROM chinook.Invoices
WHERE InvoiceDate BETWEEN '2009-01-01' AND '2009-12-31';


#18. What are the total sales for 2009?

SELECT SUM(Total)
FROM chinook.Invoices
WHERE InvoiceDate BETWEEN '2009-01-01' AND '2009-12-31';


#19. Query that includes the purchased track name with each invoice line ID.

SELECT t.Name, i.InvoiceLineId
FROM chinook.Invoice_items i
JOIN chinook.Tracks t 
ON i.TrackId = t.TrackId;


#20. Query that includes the purchased track name and artist name with each invoice line ID.

SELECT ar.name as Artist, t.Name as Track, i.InvoiceLineId
FROM chinook.Invoice_items i
LEFT JOIN chinook.tracks t 
ON i.TrackID=t.TrackID
INNER JOIN chinook.albums a
ON a.AlbumID=t.AlbumID
LEFT JOIN chinook.artists ar
ON ar.ArtistID=a.ArtistID;


#21. Query that shows all the Tracks, and include the Album name, Media type, and Genre.

SELECT t.Name AS 'Track Name', a.Title AS 'Album Title', m.Name AS 'Media Type', g.Name AS 'Genre'
FROM chinook.tracks t
JOIN chinook.Albums a 
on a.AlbumId = t.AlbumId
JOIN chinook.Media_Types m
on m.MediaTypeId = t.MediaTypeId
JOIN chinook.Genres g
on g.GenreId = t.GenreId;


#22. Show the total sales made by each sales agent.

SELECT emp.FirstName, emp.LastName,
ROUND(SUM(Inv.Total), 2) as 'Total Sales' 
FROM chinook.Employees emp

JOIN chinook.Customers cust 
ON cust.SupportRepId = emp.EmployeeId

JOIN chinook.Invoices Inv 
ON Inv.CustomerId = cust.CustomerId

WHERE emp.Title = 'Sales Support Agent' 
GROUP BY emp.FirstName;


#23. Which sales agent made the most dollars in sales in 2009?

SELECT 
  ROUND(SUM(i.Total), 2) AS total_sales, 
  e.FirstName || ' ' || e.LastName AS sales_agent
FROM 
  chinook.invoices i 
  INNER JOIN chinook.customers c ON i.CustomerId = c.CustomerId 
  INNER JOIN chinook.employees e ON c.SupportRepId = e.EmployeeId 
WHERE 
  strftime('%Y', i.InvoiceDate) = '2009' 
GROUP BY 
  sales_agent 
ORDER BY 
  total_sales DESC 
LIMIT 1;


-Caleb Riddle
